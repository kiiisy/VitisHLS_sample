-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity TrafficLight is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    btn : IN STD_LOGIC_VECTOR (0 downto 0);
    red : OUT STD_LOGIC_VECTOR (0 downto 0);
    yellow : OUT STD_LOGIC_VECTOR (0 downto 0);
    green : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of TrafficLight is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "TrafficLight_TrafficLight,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.804300,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=86,HLS_SYN_LUT=460,HLS_VERSION=2023_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv17_C34F : STD_LOGIC_VECTOR (16 downto 0) := "01100001101001111";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_EE6B27F : STD_LOGIC_VECTOR (31 downto 0) := "00001110111001101011001001111111";
    constant ap_const_lv32_1DCD64FF : STD_LOGIC_VECTOR (31 downto 0) := "00011101110011010110010011111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal counter : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal cnt_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal state_1 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal cnt : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal select_ln6_fu_257_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_next_state_1_phi_fu_96_p12 : STD_LOGIC_VECTOR (1 downto 0);
    signal state_load_load_fu_228_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal next_state_fu_248_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal sample_en_s_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal btn_read_read_fu_66_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_done_s_phi_fu_117_p12 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_green_s_phi_fu_140_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_1_load_load_fu_290_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_yellow_s_phi_fu_155_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_red_s_phi_fu_170_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_state_3_fu_348_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_next_state_5_phi_fu_185_p6 : STD_LOGIC_VECTOR (1 downto 0);
    signal next_state_4_fu_319_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln19_fu_357_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln9_fu_214_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln17_fu_272_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln9_1_fu_305_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln9_2_fu_334_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_fu_208_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln29_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_193_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln9_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_1_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    cnt_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((state_1_load_load_fu_290_p1 = ap_const_lv2_2)) then 
                    cnt <= select_ln9_2_fu_334_p3;
                elsif ((state_1_load_load_fu_290_p1 = ap_const_lv2_1)) then 
                    cnt <= select_ln9_1_fu_305_p3;
                end if;
            end if; 
        end if;
    end process;

    cnt_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (btn_read_read_fu_66_p2 = ap_const_lv1_1) and (sample_en_s_fu_202_p2 = ap_const_lv1_1) and (state_load_load_fu_228_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                cnt_1 <= add_ln17_fu_272_p2;
            elsif ((((ap_start = ap_const_logic_1) and (btn_read_read_fu_66_p2 = ap_const_lv1_0) and (sample_en_s_fu_202_p2 = ap_const_lv1_1) and (state_load_load_fu_228_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (state_load_load_fu_228_p1 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                cnt_1 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                counter <= select_ln9_fu_214_p3;
                state <= ap_phi_mux_next_state_1_phi_fu_96_p12;
                state_1 <= ap_phi_mux_next_state_5_phi_fu_185_p6;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln13_fu_208_p2 <= std_logic_vector(unsigned(counter) + unsigned(ap_const_lv17_1));
    add_ln17_fu_272_p2 <= std_logic_vector(unsigned(cnt_1) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_done_s_phi_fu_117_p12_assign_proc : process(ap_CS_fsm_state1, state_load_load_fu_228_p1, sample_en_s_fu_202_p2, btn_read_read_fu_66_p2)
    begin
        if (((state_load_load_fu_228_p1 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_phi_mux_done_s_phi_fu_117_p12 <= ap_const_lv1_1;
        elsif ((((sample_en_s_fu_202_p2 = ap_const_lv1_0) and (state_load_load_fu_228_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((btn_read_read_fu_66_p2 = ap_const_lv1_0) and (sample_en_s_fu_202_p2 = ap_const_lv1_1) and (state_load_load_fu_228_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((btn_read_read_fu_66_p2 = ap_const_lv1_1) and (sample_en_s_fu_202_p2 = ap_const_lv1_1) and (state_load_load_fu_228_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((state_load_load_fu_228_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((state_load_load_fu_228_p1 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_phi_mux_done_s_phi_fu_117_p12 <= ap_const_lv1_0;
        else 
            ap_phi_mux_done_s_phi_fu_117_p12 <= "X";
        end if; 
    end process;


    ap_phi_mux_green_s_phi_fu_140_p6_assign_proc : process(ap_CS_fsm_state1, state_1_load_load_fu_290_p1)
    begin
        if ((not((state_1_load_load_fu_290_p1 = ap_const_lv2_1)) and not((state_1_load_load_fu_290_p1 = ap_const_lv2_2)) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_phi_mux_green_s_phi_fu_140_p6 <= ap_const_lv1_1;
        elsif ((((state_1_load_load_fu_290_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((state_1_load_load_fu_290_p1 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_phi_mux_green_s_phi_fu_140_p6 <= ap_const_lv1_0;
        else 
            ap_phi_mux_green_s_phi_fu_140_p6 <= "X";
        end if; 
    end process;


    ap_phi_mux_next_state_1_phi_fu_96_p12_assign_proc : process(ap_CS_fsm_state1, select_ln6_fu_257_p3, state_load_load_fu_228_p1, next_state_fu_248_p3, sample_en_s_fu_202_p2, btn_read_read_fu_66_p2)
    begin
        if ((((sample_en_s_fu_202_p2 = ap_const_lv1_0) and (state_load_load_fu_228_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((btn_read_read_fu_66_p2 = ap_const_lv1_0) and (sample_en_s_fu_202_p2 = ap_const_lv1_1) and (state_load_load_fu_228_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_phi_mux_next_state_1_phi_fu_96_p12 <= ap_const_lv2_0;
        elsif (((btn_read_read_fu_66_p2 = ap_const_lv1_1) and (sample_en_s_fu_202_p2 = ap_const_lv1_1) and (state_load_load_fu_228_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_phi_mux_next_state_1_phi_fu_96_p12 <= ap_const_lv2_1;
        elsif (((state_load_load_fu_228_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_phi_mux_next_state_1_phi_fu_96_p12 <= next_state_fu_248_p3;
        elsif (((state_load_load_fu_228_p1 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_phi_mux_next_state_1_phi_fu_96_p12 <= ap_const_lv2_3;
        elsif (((state_load_load_fu_228_p1 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_phi_mux_next_state_1_phi_fu_96_p12 <= select_ln6_fu_257_p3;
        else 
            ap_phi_mux_next_state_1_phi_fu_96_p12 <= "XX";
        end if; 
    end process;


    ap_phi_mux_next_state_5_phi_fu_185_p6_assign_proc : process(ap_CS_fsm_state1, state_1_load_load_fu_290_p1, next_state_3_fu_348_p3, next_state_4_fu_319_p3, zext_ln19_fu_357_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((not((state_1_load_load_fu_290_p1 = ap_const_lv2_1)) and not((state_1_load_load_fu_290_p1 = ap_const_lv2_2)))) then 
                ap_phi_mux_next_state_5_phi_fu_185_p6 <= zext_ln19_fu_357_p1;
            elsif ((state_1_load_load_fu_290_p1 = ap_const_lv2_1)) then 
                ap_phi_mux_next_state_5_phi_fu_185_p6 <= next_state_4_fu_319_p3;
            elsif ((state_1_load_load_fu_290_p1 = ap_const_lv2_2)) then 
                ap_phi_mux_next_state_5_phi_fu_185_p6 <= next_state_3_fu_348_p3;
            else 
                ap_phi_mux_next_state_5_phi_fu_185_p6 <= "XX";
            end if;
        else 
            ap_phi_mux_next_state_5_phi_fu_185_p6 <= "XX";
        end if; 
    end process;


    ap_phi_mux_red_s_phi_fu_170_p6_assign_proc : process(ap_CS_fsm_state1, state_1_load_load_fu_290_p1)
    begin
        if (((not((state_1_load_load_fu_290_p1 = ap_const_lv2_1)) and not((state_1_load_load_fu_290_p1 = ap_const_lv2_2)) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((state_1_load_load_fu_290_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_phi_mux_red_s_phi_fu_170_p6 <= ap_const_lv1_0;
        elsif (((state_1_load_load_fu_290_p1 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_phi_mux_red_s_phi_fu_170_p6 <= ap_const_lv1_1;
        else 
            ap_phi_mux_red_s_phi_fu_170_p6 <= "X";
        end if; 
    end process;


    ap_phi_mux_yellow_s_phi_fu_155_p6_assign_proc : process(ap_CS_fsm_state1, state_1_load_load_fu_290_p1)
    begin
        if (((state_1_load_load_fu_290_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_phi_mux_yellow_s_phi_fu_155_p6 <= ap_const_lv1_1;
        elsif (((not((state_1_load_load_fu_290_p1 = ap_const_lv2_1)) and not((state_1_load_load_fu_290_p1 = ap_const_lv2_2)) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((state_1_load_load_fu_290_p1 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_phi_mux_yellow_s_phi_fu_155_p6 <= ap_const_lv1_0;
        else 
            ap_phi_mux_yellow_s_phi_fu_155_p6 <= "X";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    btn_read_read_fu_66_p2 <= btn;
    green <= ap_phi_mux_green_s_phi_fu_140_p6;
    grp_fu_193_p2 <= std_logic_vector(unsigned(cnt) + unsigned(ap_const_lv32_1));
    icmp_ln29_fu_242_p2 <= "1" when (unsigned(cnt_1) > unsigned(ap_const_lv32_4)) else "0";
    icmp_ln9_1_fu_328_p2 <= "1" when (grp_fu_193_p2 = ap_const_lv32_1DCD64FF) else "0";
    icmp_ln9_fu_299_p2 <= "1" when (grp_fu_193_p2 = ap_const_lv32_EE6B27F) else "0";
    next_state_3_fu_348_p3 <= 
        ap_const_lv2_0 when (icmp_ln9_1_fu_328_p2(0) = '1') else 
        ap_const_lv2_2;
    next_state_4_fu_319_p3 <= 
        ap_const_lv2_2 when (icmp_ln9_fu_299_p2(0) = '1') else 
        ap_const_lv2_1;
    next_state_fu_248_p3 <= 
        ap_const_lv2_2 when (icmp_ln29_fu_242_p2(0) = '1') else 
        ap_const_lv2_0;
    red <= ap_phi_mux_red_s_phi_fu_170_p6;
    sample_en_s_fu_202_p2 <= "1" when (counter = ap_const_lv17_C34F) else "0";
    select_ln6_fu_257_p3 <= 
        ap_const_lv2_3 when (btn(0) = '1') else 
        ap_const_lv2_0;
    select_ln9_1_fu_305_p3 <= 
        ap_const_lv32_0 when (icmp_ln9_fu_299_p2(0) = '1') else 
        grp_fu_193_p2;
    select_ln9_2_fu_334_p3 <= 
        ap_const_lv32_0 when (icmp_ln9_1_fu_328_p2(0) = '1') else 
        grp_fu_193_p2;
    select_ln9_fu_214_p3 <= 
        ap_const_lv17_0 when (sample_en_s_fu_202_p2(0) = '1') else 
        add_ln13_fu_208_p2;
    state_1_load_load_fu_290_p1 <= state_1;
    state_load_load_fu_228_p1 <= state;
    yellow <= ap_phi_mux_yellow_s_phi_fu_155_p6;
    zext_ln19_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_done_s_phi_fu_117_p12),2));
end behav;
