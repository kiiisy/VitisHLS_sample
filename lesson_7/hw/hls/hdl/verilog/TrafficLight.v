// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="TrafficLight_TrafficLight,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.804300,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=86,HLS_SYN_LUT=460,HLS_VERSION=2023_1}" *)

module TrafficLight (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        btn,
        red,
        yellow,
        green
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] btn;
output  [0:0] red;
output  [0:0] yellow;
output  [0:0] green;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [16:0] counter;
reg   [1:0] state;
reg   [31:0] cnt_1;
reg   [1:0] state_1;
reg   [31:0] cnt;
wire   [1:0] select_ln6_fu_257_p3;
reg   [1:0] ap_phi_mux_next_state_1_phi_fu_96_p12;
wire   [1:0] state_load_load_fu_228_p1;
wire   [1:0] next_state_fu_248_p3;
wire   [0:0] sample_en_s_fu_202_p2;
wire   [0:0] btn_read_read_fu_66_p2;
reg   [0:0] ap_phi_mux_done_s_phi_fu_117_p12;
reg   [0:0] ap_phi_mux_green_s_phi_fu_140_p6;
wire   [1:0] state_1_load_load_fu_290_p1;
reg   [0:0] ap_phi_mux_yellow_s_phi_fu_155_p6;
reg   [0:0] ap_phi_mux_red_s_phi_fu_170_p6;
wire   [1:0] next_state_3_fu_348_p3;
reg   [1:0] ap_phi_mux_next_state_5_phi_fu_185_p6;
wire   [1:0] next_state_4_fu_319_p3;
wire   [1:0] zext_ln19_fu_357_p1;
wire   [16:0] select_ln9_fu_214_p3;
wire   [31:0] add_ln17_fu_272_p2;
wire   [31:0] select_ln9_1_fu_305_p3;
wire   [31:0] select_ln9_2_fu_334_p3;
wire   [16:0] add_ln13_fu_208_p2;
wire   [0:0] icmp_ln29_fu_242_p2;
wire   [31:0] grp_fu_193_p2;
wire   [0:0] icmp_ln9_fu_299_p2;
wire   [0:0] icmp_ln9_1_fu_328_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 counter = 17'd0;
#0 state = 2'd0;
#0 cnt_1 = 32'd0;
#0 state_1 = 2'd0;
#0 cnt = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((state_1_load_load_fu_290_p1 == 2'd2)) begin
            cnt <= select_ln9_2_fu_334_p3;
        end else if ((state_1_load_load_fu_290_p1 == 2'd1)) begin
            cnt <= select_ln9_1_fu_305_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (btn_read_read_fu_66_p2 == 1'd1) & (sample_en_s_fu_202_p2 == 1'd1) & (state_load_load_fu_228_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        cnt_1 <= add_ln17_fu_272_p2;
    end else if ((((ap_start == 1'b1) & (btn_read_read_fu_66_p2 == 1'd0) & (sample_en_s_fu_202_p2 == 1'd1) & (state_load_load_fu_228_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (state_load_load_fu_228_p1 == 2'd2) & (1'b1 == ap_CS_fsm_state1)))) begin
        cnt_1 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        counter <= select_ln9_fu_214_p3;
        state <= ap_phi_mux_next_state_1_phi_fu_96_p12;
        state_1 <= ap_phi_mux_next_state_5_phi_fu_185_p6;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((state_load_load_fu_228_p1 == 2'd2) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_done_s_phi_fu_117_p12 = 1'd1;
    end else if ((((sample_en_s_fu_202_p2 == 1'd0) & (state_load_load_fu_228_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state1)) | ((btn_read_read_fu_66_p2 == 1'd0) & (sample_en_s_fu_202_p2 == 1'd1) & (state_load_load_fu_228_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state1)) | ((btn_read_read_fu_66_p2 == 1'd1) & (sample_en_s_fu_202_p2 == 1'd1) & (state_load_load_fu_228_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state1)) | ((state_load_load_fu_228_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state1)) | ((state_load_load_fu_228_p1 == 2'd3) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_done_s_phi_fu_117_p12 = 1'd0;
    end else begin
        ap_phi_mux_done_s_phi_fu_117_p12 = 'bx;
    end
end

always @ (*) begin
    if ((~(state_1_load_load_fu_290_p1 == 2'd1) & ~(state_1_load_load_fu_290_p1 == 2'd2) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_green_s_phi_fu_140_p6 = 1'd1;
    end else if ((((state_1_load_load_fu_290_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state1)) | ((state_1_load_load_fu_290_p1 == 2'd2) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_green_s_phi_fu_140_p6 = 1'd0;
    end else begin
        ap_phi_mux_green_s_phi_fu_140_p6 = 'bx;
    end
end

always @ (*) begin
    if ((((sample_en_s_fu_202_p2 == 1'd0) & (state_load_load_fu_228_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state1)) | ((btn_read_read_fu_66_p2 == 1'd0) & (sample_en_s_fu_202_p2 == 1'd1) & (state_load_load_fu_228_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_next_state_1_phi_fu_96_p12 = 2'd0;
    end else if (((btn_read_read_fu_66_p2 == 1'd1) & (sample_en_s_fu_202_p2 == 1'd1) & (state_load_load_fu_228_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_next_state_1_phi_fu_96_p12 = 2'd1;
    end else if (((state_load_load_fu_228_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_next_state_1_phi_fu_96_p12 = next_state_fu_248_p3;
    end else if (((state_load_load_fu_228_p1 == 2'd2) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_next_state_1_phi_fu_96_p12 = 2'd3;
    end else if (((state_load_load_fu_228_p1 == 2'd3) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_next_state_1_phi_fu_96_p12 = select_ln6_fu_257_p3;
    end else begin
        ap_phi_mux_next_state_1_phi_fu_96_p12 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((~(state_1_load_load_fu_290_p1 == 2'd1) & ~(state_1_load_load_fu_290_p1 == 2'd2))) begin
            ap_phi_mux_next_state_5_phi_fu_185_p6 = zext_ln19_fu_357_p1;
        end else if ((state_1_load_load_fu_290_p1 == 2'd1)) begin
            ap_phi_mux_next_state_5_phi_fu_185_p6 = next_state_4_fu_319_p3;
        end else if ((state_1_load_load_fu_290_p1 == 2'd2)) begin
            ap_phi_mux_next_state_5_phi_fu_185_p6 = next_state_3_fu_348_p3;
        end else begin
            ap_phi_mux_next_state_5_phi_fu_185_p6 = 'bx;
        end
    end else begin
        ap_phi_mux_next_state_5_phi_fu_185_p6 = 'bx;
    end
end

always @ (*) begin
    if (((~(state_1_load_load_fu_290_p1 == 2'd1) & ~(state_1_load_load_fu_290_p1 == 2'd2) & (1'b1 == ap_CS_fsm_state1)) | ((state_1_load_load_fu_290_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_red_s_phi_fu_170_p6 = 1'd0;
    end else if (((state_1_load_load_fu_290_p1 == 2'd2) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_red_s_phi_fu_170_p6 = 1'd1;
    end else begin
        ap_phi_mux_red_s_phi_fu_170_p6 = 'bx;
    end
end

always @ (*) begin
    if (((state_1_load_load_fu_290_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_yellow_s_phi_fu_155_p6 = 1'd1;
    end else if (((~(state_1_load_load_fu_290_p1 == 2'd1) & ~(state_1_load_load_fu_290_p1 == 2'd2) & (1'b1 == ap_CS_fsm_state1)) | ((state_1_load_load_fu_290_p1 == 2'd2) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_yellow_s_phi_fu_155_p6 = 1'd0;
    end else begin
        ap_phi_mux_yellow_s_phi_fu_155_p6 = 'bx;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_fu_208_p2 = (counter + 17'd1);

assign add_ln17_fu_272_p2 = (cnt_1 + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign btn_read_read_fu_66_p2 = btn;

assign green = ap_phi_mux_green_s_phi_fu_140_p6;

assign grp_fu_193_p2 = (cnt + 32'd1);

assign icmp_ln29_fu_242_p2 = ((cnt_1 > 32'd4) ? 1'b1 : 1'b0);

assign icmp_ln9_1_fu_328_p2 = ((grp_fu_193_p2 == 32'd499999999) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_299_p2 = ((grp_fu_193_p2 == 32'd249999999) ? 1'b1 : 1'b0);

assign next_state_3_fu_348_p3 = ((icmp_ln9_1_fu_328_p2[0:0] == 1'b1) ? 2'd0 : 2'd2);

assign next_state_4_fu_319_p3 = ((icmp_ln9_fu_299_p2[0:0] == 1'b1) ? 2'd2 : 2'd1);

assign next_state_fu_248_p3 = ((icmp_ln29_fu_242_p2[0:0] == 1'b1) ? 2'd2 : 2'd0);

assign red = ap_phi_mux_red_s_phi_fu_170_p6;

assign sample_en_s_fu_202_p2 = ((counter == 17'd49999) ? 1'b1 : 1'b0);

assign select_ln6_fu_257_p3 = ((btn[0:0] == 1'b1) ? 2'd3 : 2'd0);

assign select_ln9_1_fu_305_p3 = ((icmp_ln9_fu_299_p2[0:0] == 1'b1) ? 32'd0 : grp_fu_193_p2);

assign select_ln9_2_fu_334_p3 = ((icmp_ln9_1_fu_328_p2[0:0] == 1'b1) ? 32'd0 : grp_fu_193_p2);

assign select_ln9_fu_214_p3 = ((sample_en_s_fu_202_p2[0:0] == 1'b1) ? 17'd0 : add_ln13_fu_208_p2);

assign state_1_load_load_fu_290_p1 = state_1;

assign state_load_load_fu_228_p1 = state;

assign yellow = ap_phi_mux_yellow_s_phi_fu_155_p6;

assign zext_ln19_fu_357_p1 = ap_phi_mux_done_s_phi_fu_117_p12;

endmodule //TrafficLight
